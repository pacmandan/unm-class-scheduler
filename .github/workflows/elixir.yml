name: Elixir CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  test-frontend:
    name: Build and test frontend
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node-version: ['18.17.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Nodejs
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
    - name: Build project
      run: npm run build --if-present
      working-directory: ./frontend
    - name: Run tests
      run: npm test
      working-directory: ./frontend

  test-backend:
    name: Build and test backend
    runs-on: ubuntu-22.04

    env:
      MIX_ENV: test

    strategy:
      matrix:
        otp: ['25.3.2.2']
        elixir: ['1.15.0']

    services:
      db:
        image: postgres:12
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: localpass
          POSTGRES_USER: unm_test_user
          POSTGRES_DB: unm_class_scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
        elixir-version: ${{ matrix.elixir }}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Cache deps
      uses: actions/cache@v3
      id: cache-deps
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-
    - name: Clean to rule out incremental build as a source of flakiness
      if: github.run_attempt != '1'
      run: |
        mix deps.clean --all
        mix clean
      shell: sh
    - name: Install deps
      run: mix deps.get
    - name: Compile
      run: mix compile --warnings-as-errors
    - name: Run tests
      run: mix test
  
  docker:
    name: Build Docker Image
    runs-on: ubuntu-22.04

    needs: [test-backend, test-frontend]

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - id: auth
      name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0
      with:
        token_format: access_token
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_DOCKER_SERVICE_ACCOUNT }}'
        access_token_lifetime: 300s
    - name: Login to Artifact Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_NAME }}/unm-class-scheduler
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}
    - name: Build and push container
      uses: docker/build-push-action@v2
      with:
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_NAME }}/unm-class-scheduler/server:latest
